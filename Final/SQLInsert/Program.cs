using static System.Formats.Asn1.AsnWriter;
using System.Collections.Generic;
using System.Diagnostics.Metrics;
using System.Diagnostics;
using System.Drawing;
using System.Reflection.Emit;
using System.Reflection.PortableExecutable;
using System.Reflection;
using System.Runtime.InteropServices;
using System;
using System.Buffers.Text;
using static System.Net.Mime.MediaTypeNames;
using System.Text.RegularExpressions;

namespace SQLInsert
{
    internal class Program
    {
        static void Main(string[] args)
        {
            DAL _dal = new DAL();
            List<string> names = new List<string>()
            {
                "Overgrow",
                "Blaze",
                "Torrent",
                "Shield Dust",
                "Shed Skin",
                "Compound Eyes",
                "Swarm",
                "Keen Eye",
                "Run Away",
                "Tangled Feet",
                "Guts",
                "Intimidate",
                "Big Pecks",
                "Static",
                "Sand Veil",
                "Poison Point",
                "Rivalry",
                "Cute Charm",
                "Magic Guard",
                "Flash Fire",
                "Inner Focus",
                "Chlorophyll",
                "Unnerve",
                "Sand Rush",
                "Sheer Force",
                "Effect Spore",
                "Dry Skin",
                "Lightning Rod",
                "Sniper",
                "Hustle",
                "Unaware",
                "Drought",
                "Friend Guard",
                "Frisk",
                "Pickup",
                "Limber",
                "Damp",
                "Infiltrator",
                "Vital Spirit",
                "Tinted Lens",
                "Arena Trap",
                "Technician",
                "Water Absorb",
                "Cloud Nine",
                "Anger Point",
                "Synchronize",
                "Clear Body",
                "Rock Head",
                "Wonder Skin",
                "No Guard",
                "Oblivious",
                "Sand Force",
                "Magnet Pull",
                "Liquid Ooze",
                "Sturdy",
                "Defiant",
                "Justified",
                "Thick Fat",
                "Steadfast",
                "Stench",
                "Gluttony",
                "Shell Armor",
                "Hydration",
                "Levitate",
                "Sticky Hold",
                "Skill Link",
                "Forewarn",
                "Regenerator",
                "Insomnia",
                "Hyper Cutter",
                "Analytic",
                "Soundproof",
                "Own Tempo",
                "Natural Cure",
                "Early Bird",
                "Swift Swim",
                "Ice Body",
                "Illuminate",
                "Poison Touch",
                "Overcoat",
                "Reckless",
                "Iron Fist",
                "Weak Armor",
                "Serene Grace",
                "Leaf Guard",
                "Scrappy",
                "Flame Body",
                "Mold Breaker",
                "Harvest",
                "Unburden",
                "Water Veil",
                "Filter",
                "Volt Absorb",
                "Healer",
                "Trace",
                "Adaptability",
                "Download",
                "Battle Armor",
                "Moxie",
                "Rattled",
                "Immunity",
                "Pressure",
                "Snow Cloak",
                "Quick Feet",
                "Anticipation",
                "Imposter",
                "Solar Power",
                "Rain Dish"
            };

            List<string> effects = new List<string>()
            {
                "Powers up Grass-type moves in a pinch.",
                "Powers up Fire-type moves in a pinch.",
                "Powers up Water-type moves in a pinch.",
                "Blocks the added effects of attacks taken.",
                "The Pokémon may heal its own status problems.",
                "The Pokémon's accuracy is boosted.",
                "Powers up Bug-type moves in a pinch.",
                "Prevents other Pokémon from lowering accuracy.",
                "Enables a sure getaway from wild Pokémon.",
                "Raises evasion if the Pokémon is confused.",
                "Boosts Attack if there is a status problem.",
                "Lowers the foe's Attack stat.",
                "Protects the Pokémon from Defense-lowering attacks.",
                "Contact with the Pokémon may cause paralysis.",
                "Boosts the Pokémon's evasion in a sandstorm.",
                "Contact with the Pokémon may poison the attacker.",
                "Deals more damage to a Pokémon of same gender.",
                "Contact with the Pokémon may cause infatuation.",
                "Protects the Pokémon from indirect damage.",
                "It powers up Fire-type moves if it's hit by one.",
                "The Pokémon is protected from flinching.",
                "Boosts the Pokémon's Speed in sunshine.",
                "Makes the foe nervous and unable to eat Berries.",
                "Boosts the Pokémon's Speed in a sandstorm.",
                "Removes added effects to increase move damage.",
                "Contact may poison or cause paralysis or sleep.",
                "Reduces HP if it is hot. Water restores HP.",
                "Draws in all Electric-type moves to up Sp. Attack.",
                "Powers up moves if they become critical hits.",
                "Boosts the Attack stat, but lowers accuracy.",
                "Ignores any stat changes in the Pokémon.",
                "Turns the sunlight harsh when the Pokémon enters a battle.",
                "Friend Guard",
                "The Pokémon can check a foe's held item.",
                "The Pokémon may pick up items.",
                "The Pokémon is protected from paralysis.",
                "Prevents the use of self-destructing moves.",
                "Passes through the foe's barrier and strikes.",
                "Prevents the Pokémon from falling asleep.",
                "Powers up “not very effective” moves.",
                "Prevents the foe from fleeing.",
                "Powers up the Pokémon's weaker moves.",
                "Restores HP if hit by a Water-type move.",
                "Eliminates the effects of weather.",
                "Maxes Attack after taking a critical hit.",
                "Passes a burn, poison, or paralysis to the foe.",
                "Prevents other Pokémon from lowering its stats.",
                "Protects the Pokémon from recoil damage.",
                "Makes status-changing moves more likely to miss.",
                "Ensures attacks by or against the Pokémon land.",
                "Prevents it from becoming infatuated.",
                "Boosts certain moves' power in a sandstorm.",
                "Prevents Steel-type Pokémon from escaping.",
                "Damages attackers using any draining move.",
                "It cannot be knocked out with one hit.",
                "Sharply raises Attack when the Pokémon's stats are lowered.",
                "Raises Attack when hit by a Dark-type move.",
                "Ups resistance to Fire- and Ice-type moves.",
                "Raises Speed each time the Pokémon flinches.",
                "The stench may cause the target to flinch.",
                "Encourages the early use of a held Berry.",
                "The Pokémon is protected against critical hits.",
                "Heals status problems if it is raining.",
                "Gives immunity to Ground type moves.",
                "Protects the Pokémon from item theft.",
                "Increases the frequency of multi-strike moves.",
                "Determines what moves a foe has.",
                "Restores a little HP when withdrawn from battle.",
                "Prevents the Pokémon from falling asleep.",
                "Prevents other Pokémon from lowering Attack stat.",
                "Boosts move power when the Pokémon moves last.",
                "Gives immunity to sound-based moves.",
                "Prevents the Pokémon from becoming confused.",
                "All status problems heal when it switches out.",
                "The Pokémon awakens quickly from sleep.",
                "Boosts the Pokémon's Speed in rain.",
                "The Pokémon gradually regains HP in a hailstorm.",
                "Raises the likelihood of meeting wild Pokémon.",
                "May poison targets when a Pokémon makes contact.",
                "Protects the Pokémon from weather damage.",
                "Powers up moves that have recoil damage.",
                "Boosts the power of punching moves.",
                "Physical attacks lower Defense and raise Speed.",
                "Boosts the likelihood of added effects appearing.",
                "Prevents problems with status in sunny weather.",
                "Enables moves to hit Ghost-type Pokémon.",
                "Contact with the Pokémon may burn the attacker.",
                "Moves can be used regardless of Abilities.",
                "May create another Berry after one is used.",
                "Raises Speed if a held item is used.",
                "Prevents the Pokémon from getting a burn.",
                "Reduces damage from super-effective attacks.",
                "Restores HP if hit by an Electric-type move.",
                "May heal an ally's status conditions.",
                "The Pokémon copies a foe's Ability.",
                "Powers up moves of the same type.",
                "Adjusts power according to a foe's defenses.",
                "The Pokémon is protected against critical hits.",
                "Boosts Attack after knocking out any Pokémon.",
                "Bug, Ghost or Dark type moves scare it and boost its Speed.",
                "Prevents the Pokémon from getting poisoned.",
                "The Pokémon raises the foe's PP usage.",
                "Raises evasion in a hailstorm.",
                "Boosts Speed if there is a status problem.",
                "Senses a foe's dangerous moves.",
                "It transforms itself into the Pokémon it is facing.",
                "In sunshine, Sp. Atk is boosted but HP decreases.",
                "The Pokémon gradually regains HP in rain."
            };

            //for (int i = 0; i < effects.Count; i++)
            //{
            //    _dal.InsertAbility(names[i], effects[i]);
            //}

            string path = "~/ css / sprites / {Game.Answer.Outline}_shape.png";
            string folderpath = "C:\\workspace\\src\\prog455\\Final\\GuessThatPokemon\\Content\\pokemon_sprites";

            //for (int i = 1; i < 152; i++)
            //{
            //    _dal.InsertSprites($"./css/sprites/{i}.png", $"./css/sprites/{i}_shape.png", i);
            //}

            List<string> name = new List<string>()
                        {
                            "Bulbasaur",
                            "Ivysaur",
                "Venusaur",
                "Charmander",
                "Charmeleon",
                "Charizard",
                "Squirtle",
                "Wartortle",
                "Blastoise",
                "Caterpie",
                "Metapod",
                "Butterfree",
                "Weedle",
                "Kakuna",
                "Beedrill",
                "Pidgey",
                "Pidgeotto",
                "Pidgeot",
                "Rattata",
                "Raticate",
                "Spearow",
                "Fearow",
                "Ekans",
                "Arbok",
                "Pikachu",
                "Raichu",
                "Sandshrew",
                "Sandslash",
                "Nidoran♀",
                "Nidorina",
                "Nidoqueen",
                "Nidoran♂",
                "Nidorino",
                "Nidoking",
                "Clefairy",
                "Clefable",
                "Vulpix",
                "Ninetales",
                "Jigglypuff",
                "Wigglytuff",
                "Zubat",
                "Golbat",
                "Oddish",
                "Gloom",
                "Vileplume",
                "Paras",
                "Parasect",
                "Venonat",
                "Venomoth",
                "Diglett",
                "Dugtrio",
                "Meowth",
                "Persian",
                "Psyduck",
                "Golduck",
                "Mankey",
                "Primeape",
                "Growlithe",
                "Arcanine",
                "Poliwag",
                "Poliwhirl",
                "Poliwrath",
                "Abra",
                "Kadabra",
                "Alakazam",
                "Machop",
                "Machoke",
                "Machamp",
                "Bellsprout",
                "Weepinbell",
                "Victreebel",
                "Tentacool",
                "Tentacruel",
                "Geodude",
                "Graveler",
                "Golem",
                "Ponyta",
                "Rapidash",
                "Slowpoke",
                "Slowbro",
                "Magnemite",
                "Magneton",
                "Farfetch'd",
                "Doduo",
                "Dodrio",
                "Seel",
                "Dewgong",
                "Grimer",
                "Muk",
                "Shellder",
                "Cloyster",
                "Gastly",
                "Haunter",
                "Gengar",
                "Onix",
                "Drowzee",
                "Hypno",
                "Krabby",
                "Kingler",
                "Voltorb",
                "Electrode",
                "Exeggcute",
                "Exeggutor",
                "Cubone",
                "Marowak",
                "Hitmonlee",
                "Hitmonchan",
                "Lickitung",
                "Koffing",
                "Weezing",
                "Rhyhorn",
                "Rhydon",
                "Chansey",
                "Tangela",
                "Kangaskhan",
                "Horsea",
                "Seadra",
                "Goldeen",
                "Seaking",
                "Staryu",
                "Starmie",
                "Mr. Mime",
                "Scyther",
                "Jynx",
                "Electabuzz",
                "Magmar",
                "Pinsir",
                "Tauros",
                "Magikarp",
                "Gyarados",
                "Lapras",
                "Ditto",
                "Eevee",
                "Vaporeon",
                "Jolteon",
                "Flareon",
                "Porygon",
                "Omanyte",
                "Omastar",
                "Kabuto",
                "Kabutops",
                "Aerodactyl",
                "Snorlax",
                "Articuno",
                "Zapdos",
                "Moltres",
                "Dratini",
                "Dragonair",
                "Dragonite",
                "Mewtwo",
                "Mew"
                        };

            List<int> type1 = new List<int>
                        {2,
                        2,
            2,
            1,
            1,
            1,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            13,
            13,
            6,
            6,
            10,
            10,
            13,
            13,
            13,
            13,
            13,
            13,
            12,
            12,
            1,
            1,
            12,
            12,
            13,
            13,
            2,
            2,
            2,
            4,
            4,
            4,
            4,
            10,
            10,
            12,
            12,
            3,
            3,
            7,
            7,
            1,
            1,
            3,
            3,
            3,
            14,
            14,
            14,
            7,
            7,
            7,
            2,
            2,
            2,
            3,
            3,
            15,
            15,
            15,
            1,
            1,
            3,
            3,
            6,
            6,
            12,
            12,
            12,
            3,
            3,
            13,
            13,
            3,
            3,
            9,
            9,
            9,
            15,
            14,
            14,
            3,
            3,
            6,
            6,
            2,
            2,
            10,
            10,
            7,
            7,
            12,
            13,
            13,
            10,
            10,
            12,
            2,
            12,
            3,
            3,
            3,
            3,
            3,
            3,
            14,
            4,
            11,
            6,
            1,
            4,
            12,
            3,
            3,
            3,
            12,
            12,
            3,
            6,
            1,
            12,
            15,
            15,
            15,
            15,
            15,
            12,
            11,
            6,
            1,
            5,
            5,
            5,
            14,
            14
                        };

            List<int> type2 = new List<int>
                        {13,
                        13,
            13,
            0,
            0,
            8,
            0,
            0,
            0,
            0,
            0,
            8,
            13,
            13,
            13,
            8,
            8,
            8,
            0,
            0,
            8,
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            0,
            0,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            8,
            8,
            13,
            13,
            13,
            2,
            2,
            13,
            13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            13,
            13,
            13,
            13,
            10,
            10,
            10,
            0,
            0,
            14,
            14,
            16,
            16,
            8,
            8,
            8,
            0,
            11,
            0,
            0,
            0,
            11,
            13,
            13,
            13,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            14,
            14,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            15,
            15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            14,
            0,
            8,
            14,
            0,
            0,
            0,
            0,
            0,
            8,
            11,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            3,
            3,
            3,
            8,
            0,
            8,
            8,
            8,
            0,
            0,
            8,
            0,
            0,
                        };

            List<int> abil = new List<int>()
                        {1,
                        1,
            1,
            2,
            2,
            2,
            3,
            3,
            3,
            4,
            5,
            6,
            4,
            5,
            7,
            8,
            8,
            8,
            9,
            9,
            8,
            8,
            12,
            12,
            14,
            14,
            15,
            15,
            16,
            16,
            16,
            16,
            16,
            16,
            18,
            18,
            20,
            20,
            18,
            18,
            21,
            21,
            22,
            22,
            22,
            26,
            26,
            6,
            4,
            15,
            15,
            35,
            36,
            37,
            37,
            39,
            39,
            12,
            12,
            43,
            43,
            43,
            46,
            46,
            46,
            11,
            11,
            11,
            22,
            22,
            22,
            47,
            47,
            48,
            48,
            48,
            9,
            9,
            51,
            51,
            53,
            53,
            7,
            9,
            9,
            58,
            58,
            60,
            60,
            62,
            62,
            64,
            64,
            64,
            48,
            69,
            69,
            70,
            70,
            72,
            72,
            22,
            22,
            48,
            48,
            36,
            7,
            73,
            64,
            64,
            28,
            28,
            74,
            22,
            75,
            76,
            16,
            76,
            76,
            78,
            78,
            72,
            7,
            51,
            14,
            87,
            70,
            12,
            76,
            12,
            43,
            36,
            9,
            43,
            93,
            20,
            95,
            76,
            76,
            76,
            76,
            48,
            101,
            102,
            102,
            102,
            5,
            5,
            21,
            102,
            46
                     };

            //for (int i = 0; i <= 150; i++)
            //{
            //    _dal.InsertPokemon(name[i], type1[i], type2[i], abil[i], i + 1);
            //}

            List<int> pokemondAtLocation = new List<int>()
            {
                16, 19,
                19, 16, 13, 122, 10,
                16, 21, 39,
                19, 21, 23, 129,
                43, 69, 16, 56, 52, 29,
                16, 43, 52, 56, 69, 129, 60, 118, 90, 98,
                16, 43, 69, 56, 52, 58, 37,
                16, 23, 27, 37, 56, 52, 58,
                19, 21, 23, 27,
                100, 21, 23, 27, 129, 60, 118, 61, 79,
                23, 27, 21, 96, 129, 60, 118, 90, 98, 30,
                43, 69, 16, 48, 44, 70, 129, 60, 118, 72, 98, 143,
                43, 69, 16, 48, 44, 70, 133, 129, 60, 118, 72, 98,
                43, 69, 48, 16, 133, 17, 44, 70,
                43, 69, 48, 16, 133, 17, 44, 70,
                21, 19, 84, 20, 143,
                21, 20, 84, 22, 129, 60,118,72,98,
                21,84,20, 22,129,60,118,72,98,
                72, 129, 60, 118, 90, 116, 120,
                72, 129, 60, 118, 90, 116, 120,
                19, 16, 17, 20, 114, 72, 129, 60, 118, 90, 116, 120,
                19, 32, 29, 21, 129, 60, 118,
                133, 22, 23, 27, 21, 24, 28, 129, 60, 118, 80, 99, 117, 119,
                13, 10, 43, 69, 16, 14, 11, 63, 129, 60, 118, 54, 98,
                13, 10, 43, 69, 14, 11, 16, 63, 129, 60, 118, 54, 98,
                42, 82, 97, 24, 28, 49, 85, 47, 64, 26, 133, 101, 105, 112, 40, 113, 129, 60, 118, 80, 98, 117, 119, 150,
                129, 60, 118, 54, 98, 124,
                129, 60, 118, 90, 116, 120, 138, 140, 142, 101, 86, 114,
                50, 51,
                129, 60, 118, 98, 119,
                100, 25, 81, 82, 125, 26, 101, 145,
                32, 29, 102, 111, 48, 33, 30, 47, 123, 127, 113, 46, 84, 115, 128, 49, 129, 60, 118, 54, 79, 98, 147,
                41, 74, 46, 35,
                4, 1, 7, 129, 60, 118, 72,
                77, 109, 58, 37, 88, 110, 89, 126,
                92, 104, 93,
                106, 107,
                86, 116, 98, 90, 120, 79, 41, 54, 55, 80, 42, 87, 117, 99, 129, 60, 118, 144,
                131,
                129, 60, 118, 90, 98, 83,
                95, 66, 41, 74, 42, 68, 105, 75, 49, 146,
                129, 60, 118, 72,
                13, 10, 14, 11, 25,
                41, 74, 66, 95



            };

            List<int> location = new List<int>()
            {
                1,1,
                2,2,2,2,2,
                3,3,3,
                4,4,4,4,
                5,5,5,5,5,5,
                6,6,6,6,6,6,6,6,6,6,
                7,7,7,7,7,7,7,
                8,8,8,8,8,8,8,
                9,9,9,9,
                10,10,10,10,10,10,10,10,10,
                11,11,11,11,11,11,11,11,11,11,
                12,12,12,12,12,12,12,12,12,12,12,12,
                13,13,13,13,13,13,13,13,13,13,13,13,
                14,14,14,14,14,14,14,14,
                15,15,15,15,15,15,15,15,
                16,16,16,16,16,
                17,17,17,17,17,17,17,17,17,
                18,18,18,18,18,18,18,18,18,
                19,19,19,19,19,19,19,
                20,20,20,20,20,20,20,
                21,21,21,21,21,21,21,21,21,21,21,21,
                22,22,22,22,22,22,22,
                23,23,23,23,23,23,23,23,23,23,23,23,23,23,
                24,24,24,24,24,24,24,24,24,24,24,24,24,
                25,25,25,25,25,25,25,25,25,25,25,25,25,
                27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
                28,28,28,28,28,28,
                29,29,29,29,29,29,29,29,29,29,29,29,
                30,30,
                31,31,31,31,31,
                32,32,32,32,32,32,32,32,
                33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
                34,34,34,34,
                35,35,35,35,35,35,35,
                36,36,36,36,36,36,36,36,
                37,37,37,
                38,38,
                39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
                40,
                41,41,41,41,41,41,
                42,42,42,42,42,42,42,42,42,42,
                43,43,43,43,
                44,44,44,44,44,
                45,45,45,45

            };

            //for(int i = 0; i < location.Count; i++)
            //{
            //    _dal.InsertPokemonLocation(pokemondAtLocation[i], location[i],i+1);
            //}

            Console.ReadKey();

        }
    }
}